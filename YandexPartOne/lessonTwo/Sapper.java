package lessonTwo;

/*
    I. Сапер
        Ограничение времени	1 секунда
        Ограничение памяти	64Mb
        Ввод	стандартный ввод или input.txt
        Вывод	стандартный вывод или output.txt
        Вам необходимо построить поле для игры "Сапер" по его конфигурации – размерам и координатам расставленных на нем мин.

        Вкратце напомним правила построения поля для игры "Сапер":

        Поле состоит из клеток с минами и пустых клеток
        Клетки с миной обозначаются символом *
        Пустые клетки содержат число ki,j, 0≤ ki, j ≤ 8 – количество мин на соседних клетках. Соседними клетками являются восемь клеток, имеющих смежный угол или сторону.
        Формат ввода
        В первой строке содержатся три числа: N, 1 ≤ N ≤ 100 - количество строк на поле, M, 1 ≤ M ≤ 100 - количество столбцов на поле, K, 0 ≤ K ≤ N ⋅ M - количество мин на поле.

        В следующих K строках содержатся по два числа с координатами мин: p, 1 ≤ p ≤ N - номер строки мины, q, 1 ≤ 1 ≤ M - номер столбца мины.

        Формат вывода
        Выведите построенное поле, разделяя строки поля переводом строки, а столбцы - пробелом.

        Пример 1
        Ввод	Вывод
        3 2 2
        1 1
        2 2
        * 2
        2 *
        1 1
        Пример 2
        Ввод	Вывод
        2 2 0
        0 0
        0 0
        Пример 3
        Ввод	Вывод
        4 4 4
        1 3
        2 1
        4 2
        4 4
        1 2 * 1
        * 2 1 1
        2 2 2 1
        1 * 2 *
 */

import java.util.Scanner;

public class Sapper {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int i, j;
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int count = scanner.nextInt();

        char[][] field = new char[n][m];

        for (i = 0; i < n; i++) {
            for (j = 0; j < m; j++) {
                field[i][j] = '0';
            }
        }

        for (int k = 0; k < count; k++) {
            i = scanner.nextInt() - 1;
            j = scanner.nextInt() - 1;

            field[i][j] = '*';

            if (i > 0 && j > 0 && field[i - 1][j - 1] != '*') {
                field[i - 1][j - 1] += 1;
            }
            if (i > 0 && j < m - 1 && field[i - 1][j + 1] != '*') {
                field[i - 1][j + 1] += 1;
            }
            if (i > 0 && field[i - 1][j] != '*') {
                field[i - 1][j] += 1;
            }
            if (j > 0 && field[i][j - 1] != '*') {
                field[i][j - 1] += 1;
            }
            if (i < n - 1 && j < m - 1 && field[i + 1][j + 1] != '*') {
                field[i + 1][j + 1] += 1;
            }
            if (i < n - 1 && j > 0 && field[i + 1][j - 1] != '*') {
                field[i + 1][j - 1] += 1;
            }
            if (i < n - 1 && field[i + 1][j] != '*') {
                field[i + 1][j] += 1;
            }
            if (j < m - 1 && field[i][j + 1] != '*') {
                field[i][j + 1] += 1;
            }
        }

        for (i = 0; i < n; i++) {
            for (j = 0; j < m - 1; j++) {
                System.out.print(field[i][j] + " ");
            }
            System.out.println(field[i][j]);
        }
    }
}
